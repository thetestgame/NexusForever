#

name: Create Github Release
on: 
  push:
    branches:
      - "master"
    paths:
      - Source/*
      - .github/workflows/release.yml
  pull_request:
    paths:
      - Source/*
      - .github/workflows/release.yml

jobs:
  #
  build_application:
    name: Build Application ${{ matrix.applicationName }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        applicationName:
          - ClientConnector
          - MapGenerator
          - AuthServer
          - StsServer
          - WorldServer
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: Install dependencies
        working-directory: ./Source
        run: dotnet restore NexusForever.sln
      - 
        name: Build
        working-directory: ./Source
        run: dotnet build ./NexusForever.${{ matrix.applicationName }}
      - 
        name: Publish
        working-directory: ./Source
        run: dotnet publish -c Release -r win-x64 ./NexusForever.${{ matrix.applicationName }} --no-self-contained
      - 
        name: Upload Build
        uses: actions/upload-artifact@v2
        if: github.event.ref == 'refs/heads/master'
        with:
          name: Build-${{ matrix.applicationName }}-${{ matrix.os }}
          path: ./Source/NexusForever.${{ matrix.applicationName }}/bin/Release/netcoreapp*.*/win-x64/publish/*

  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    needs: build_application
    if: github.event.ref == 'refs/heads/master'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - 
        name: Create Release Version
        id: release_tag
        run: |
          sha=$(cut -c 1-7 <<< $GITHUB_SHA)
          echo "::set-output name=sha::$sha"
          echo "::set-output name=date::$(date +'%Y.%m.%d')"
      - 
        name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.release_tag.outputs.date }}.${{ steps.release_tag.outputs.sha }}
          release_name: Release ${{ steps.release_tag.outputs.date }}.${{ steps.release_tag.outputs.sha }}
          draft: false
          prerelease: false

  #
  upload_release_artifact:
    name: Upload Github Release Artifacts (${{ matrix.os }})
    runs-on: ubuntu-latest
    needs: create_release
    if: github.event.ref == 'refs/heads/master'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - 
        name: Checkout Repository
        uses: actions/checkout@v2
      - 
        name: Download Build Artifact (ClientConnector)
        uses: actions/download-artifact@v2
        with:
          name: Build-ClientConnector-${{ matrix.os }}
          path: build/ClientConnector-${{ matrix.os }}
      - 
        name: Download Build Artifact (MapGenerator)
        uses: actions/download-artifact@v2
        with:
          name: Build-MapGenerator-${{ matrix.os }}
          path: build/MapGenerator-${{ matrix.os }}
      - 
        name: Download Build Artifact (AuthServer)
        uses: actions/download-artifact@v2
        with:
          name: Build-AuthServer-${{ matrix.os }}
          path: build/AuthServer-${{ matrix.os }}
      - 
        name: Download Build Artifact (StsServer)
        uses: actions/download-artifact@v2
        with:
          name: Build-StsServer-${{ matrix.os }}
          path: build/StsServer-${{ matrix.os }}
      - 
        name: Download Build Artifact (WorldServer)
        uses: actions/download-artifact@v2
        with:
          name: Build-WorldServer-${{ matrix.os }}
          path: build/WorldServer-${{ matrix.os }}
      - 
        name: Zip release directory
        run: zip -r NexusForever-${{ matrix.os }}.zip ./build
      - 
        name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./NexusForever-${{ matrix.os }}.zip 
          asset_name: NexusForever-${{ matrix.os }}.zip 
          asset_content_type: application/zip

  #
  cleanup_artifacts:
    name: Cleanup build artifacts
    runs-on: ubuntu-latest
    needs: upload_release_artifact
    if: github.event.ref == 'refs/heads/master'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        applicationName:
          - ClientConnector
          - MapGenerator
          - AuthServer
          - StsServer
          - WorldServer
    steps:
      - name: Tidy up artifact to avoid storage limit
        uses: geekyeggo/delete-artifact@v1
        with:
          name: Build-${{ matrix.applicationName }}-${{ matrix.os }}